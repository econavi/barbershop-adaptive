/*
Stylus variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon_home_width;
}

The large array-like variables contain all information about a single icon
$icon_home = x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet = width height image $spritesheet_sprites;
*/
$blue_name = 'blue';
$blue_x = 0px;
$blue_y = 116px;
$blue_offset_x = 0px;
$blue_offset_y = -116px;
$blue_width = 50px;
$blue_height = 50px;
$blue_total_width = 50px;
$blue_total_height = 166px;
$blue_image = '../assets/img/sprites/demo.png';
$blue = 0px 116px 0px -116px 50px 50px 50px 166px '../assets/img/sprites/demo.png' 'blue';
$green_name = 'green';
$green_x = 0px;
$green_y = 0px;
$green_offset_x = 0px;
$green_offset_y = 0px;
$green_width = 50px;
$green_height = 50px;
$green_total_width = 50px;
$green_total_height = 166px;
$green_image = '../assets/img/sprites/demo.png';
$green = 0px 0px 0px 0px 50px 50px 50px 166px '../assets/img/sprites/demo.png' 'green';
$red_name = 'red';
$red_x = 0px;
$red_y = 58px;
$red_offset_x = 0px;
$red_offset_y = -58px;
$red_width = 50px;
$red_height = 50px;
$red_total_width = 50px;
$red_total_height = 166px;
$red_image = '../assets/img/sprites/demo.png';
$red = 0px 58px 0px -58px 50px 50px 50px 166px '../assets/img/sprites/demo.png' 'red';
$blue_2x_name = 'blue@2x'
$blue_2x_x = 0px
$blue_2x_y = 0px
$blue_2x_offset_x = 0px
$blue_2x_offset_y = 0px
$blue_2x_width = 100px
$blue_2x_height = 100px
$blue_2x_total_width = 100px
$blue_2x_total_height = 332px
$blue_2x_image = '../assets/img/sprites/demo@2x.png'
$blue_2x = 0px 0px 0px 0px 100px 100px 100px 332px '../assets/img/sprites/demo@2x.png' 'blue@2x'
$green_2x_name = 'green@2x'
$green_2x_x = 0px
$green_2x_y = 232px
$green_2x_offset_x = 0px
$green_2x_offset_y = -232px
$green_2x_width = 100px
$green_2x_height = 100px
$green_2x_total_width = 100px
$green_2x_total_height = 332px
$green_2x_image = '../assets/img/sprites/demo@2x.png'
$green_2x = 0px 232px 0px -232px 100px 100px 100px 332px '../assets/img/sprites/demo@2x.png' 'green@2x'
$red_2x_name = 'red@2x'
$red_2x_x = 0px
$red_2x_y = 116px
$red_2x_offset_x = 0px
$red_2x_offset_y = -116px
$red_2x_width = 100px
$red_2x_height = 100px
$red_2x_total_width = 100px
$red_2x_total_height = 332px
$red_2x_image = '../assets/img/sprites/demo@2x.png'
$red_2x = 0px 116px 0px -116px 100px 100px 100px 332px '../assets/img/sprites/demo@2x.png' 'red@2x'
$sp_demo_width = 50px;
$sp_demo_height = 166px;
$sp_demo_image = '../assets/img/sprites/demo.png';
$sp_demo_sprites = $blue $green $red;
$sp_demo = 50px 166px '../assets/img/sprites/demo.png' $sp_demo_sprites;
$retina_spritesheet_width = 100px
$retina_spritesheet_height = 332px
$retina_spritesheet_image = '../assets/img/sprites/demo@2x.png'
$retina_spritesheet_sprites = $blue_2x $green_2x $red_2x
$retina_spritesheet = 100px 332px '../assets/img/sprites/demo@2x.png' $retina_spritesheet_sprites

// These "retina group" variables are mappings for the naming and pairing of normal and retina sprites.

// The list formatted variables are intended for mixins like `retinaSprite` and `retinaSprites`.

$blue_group_name = 'blue'
$blue_group = 'blue' $blue $blue_2x
$green_group_name = 'green'
$green_group = 'green' $green $green_2x
$red_group_name = 'red'
$red_group = 'red' $red $red_2x
$retina_groups = $blue_group $green_group $red_group

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  spriteWidth($icon_home)
}

.icon-email {
  sprite($icon_email)
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
spriteWidth($sprite) {
  width: $sprite[4];
}

spriteHeight($sprite) {
  height: $sprite[5];
}

spritePosition($sprite) {
  background-position: $sprite[2] $sprite[3];
}

spriteImage($sprite) {
  background-image: url($sprite[8]);
}

sprite($sprite) {
  spriteImage($sprite)
  spritePosition($sprite)
  spriteWidth($sprite)
  spriteHeight($sprite)
}


// The `retinaSprite` mixin sets up rules and a media query for a sprite/retina sprite.
// It should be used with a "retina group" variable.
//
// The media query is from CSS Tricks: https://css-tricks.com/snippets/css/retina-display-media-query/
//
// $icon_home_group = 'icon-home' $icon_home $icon_home_2x;
//
// .icon-home {
//     retinaSprite($icon_home_group)
// }


spriteBackgroundSize($sprite) {
	background-size $sprite[6] $sprite[7]
}

retinaSprite($retina_group) {
	$normal_sprite = $retina_group[1]
	$retina_sprite = $retina_group[2]
	sprite($normal_sprite)

	@media (-webkit-min-device-pixel-ratio: 2),
				 (min-resolution: 192dpi) {
		spriteImage($retina_sprite)
		spriteBackgroundSize($normal_sprite)
	}
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of Stylus

This must be run when you have at least 2 sprites.
  If run with a single sprite, then there will be reference errors.

sprites($spritesheet_sprites);
*/
sprites($sprites) {
  for $sprite in $sprites {
    $sprite_name = $sprite[9];
    .{$sprite_name} {
      sprite($sprite);
    }
  }
}

// The `retinaSprites` mixin generates a CSS rule and media query for retina groups
// This yields the same output as CSS retina template but can be overridden in Stylus
//
// retinaSprites($retina_groups)

retinaSprites($retina_groups) {
	for $retina_group in $retina_groups {
		$sprite_name = $retina_group[0];
		.{$sprite_name} {
			retinaSprite $retina_group
		}
	}
}
